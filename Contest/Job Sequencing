Job Sequencing
The problem at hand involves a set of jobs, each with a deadline and an associated profit. These jobs are subject to the constraint that only one job can be scheduled at a time, and each job takes exactly one unit of time to complete. The minimum deadline for a job is 1.
Input: The input consists of an array of jobs with their respective deadlines and profits. The order in which the jobs are listed in the input does not necessarily represent the optimal order.

Job - Deadline - Profit
A - 2 - 100
C - 2 - 27
D - 1 - 25
E - 3 - 15
B - 1 - 19

The goal is to find a sequence of jobs that maximizes the total profit, subject to the constraint that each job must be completed before its deadline.

example

Input:
6
a b c d e
2 1 2 1 3
100 19 27 25 15

Note:
Line 1: job count
Line 2: job name
Line 3: deadline
Line 4:Profit

Output:

c a e

Exercise-2

Input:

5
p q r s t
2 1 3 1 3
99 190 27 25 15

Output:
q p r


Code-

#include <iostream>
#include <algorithm>
using namespace std;

// Job Structure
typedef struct {
    char id;
    int deadline;
    int profit;
} Job;

/* Function to compare two jobs based on their profit.
   Returns true if job b's profit < job a's profit */
bool compareJob(Job a, Job b) {
    return a.profit > b.profit;
}

// Function finds the best job sequence
void bestJob(Job jobs[], int sizeOfJobs) {
    // Null char array
    char jobsToDo[5] = {'\0'};

    for (int i = 0, k = 0; i < sizeOfJobs; i++) {
        k = jobs[i].deadline - 1;
        // Searching backward for the empty date nearest to the deadline
        while (jobsToDo[k] != '\0' && k >= 0) {
            k--;
        }

        // If an empty date is found, set the job
        if (k != -1)
            jobsToDo[k] = jobs[i].id;
    }

    int idx = 0;
    while (jobsToDo[idx] != '\0') {
        cout << jobsToDo[idx] << " ";
        idx++;
    }
    cout << endl;
}


int main() {
    int n;
    std::cin >> n;

    // Input job details
    Job jobs[n];
    for (int i = 0; i < n; ++i) {
        std::cin >> jobs[i].id;
    }

    for (int i = 0; i < n; ++i) {
        std::cin >> jobs[i].deadline;
    }

    for (int i = 0; i < n; ++i) {
        std::cin >> jobs[i].profit;
    }

    // Sorting jobs[] with respect to profit
    std::sort(jobs, jobs + n, compareJob);

    // Call the job sequencing method
    bestJob(jobs, n);

    return 0;
}

